zro main(){


Hanoi(3,'1','2','3');
ent b=ackermann(3,7);
_imp("ackermann es: %e",b);

	
}

zro Hanoi(ent discos, chr origen[], chr aux[], chr destino[]){
    if (discos == 1) {
    	_imp("mover disco de %s a %s",origen,destino);
    } else {
        Hanoi(discos - 1, origen, destino, aux);
        _imp("mover disco de %s a %s",origen,destino);
        Hanoi(discos - 1, aux, origen, destino);
    }
}


    ent ackermann(ent m, ent n) {
        if (m == 0) {
            regresar (n + 1);
        } else if (m > 0 && n == 0) {
            regresar ackermann(m - 1, 1);
        } else {
            regresar ackermann(m - 1, ackermann(m, n - 1));
        }
    }
    
ent potencia(ent base, ent exp) {
    if(exp==0){
    	  regresar 1;
    }else{
    	  regresar base * potencia(base, exp - 1);
    }
}

_imp("Potencia 2Â¬16 de 65536 = %e",potencia(2,16));


ent factorial(ent n) {
	if(n==0){
    	  regresar 1;
    }else{
    	  regresar n * factorial(n- 1);
    }
}

_imp("Factorial de 9 362880 = %e",factorial(9));

ent modulo(ent n, ent p) {
	if(n<p){
		regresar n;
	}else{
		regresar  modulo(n - p, p);
	}
}
_imp("Modulo de 4 y 3 1=%e",modulo(4,7));

ent fibonaci(ent n){
	if(n==1 || n ==2){
		regresar 1;
	}else
	{
		regresar fibonaci(n-1) + fibonaci(n-2) ;
	}
} 
_imp("fibonaci de 19 4181= %e",fibonaci(19));

ent hofstaderFemenina(ent n) {
    if (n < 0) {
        regresar 0;
    } else {
            if(n==0){
                regresar 1;
            }else{
                regresar n-hofstaderFemenina(n - 1);
            }
    }
}

ent hofstaderMasculino(ent n) {
    if (n < 0) {
        regresar 0;
    } else {
            if(n==0){
                regresar 0;
            }else{
                regresar n - hofstaderMasculino(n - 1);
            }
    }
}

for (ent i = 0; i < 20; i=i+1) {
        _imp("Hoftater Femenino de %e =  %e ",i,hofstaderFemenina(i));
        _imp("Hoftater Masculino de %e =  %e ",i,hofstaderMasculino(i));
    }





